from .util import *


def test_top_side():
    params = GlobalParams()
    x_shapes = [
        [Unknown(2, 2, Grid([
            [3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5],
            [6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2],
            [5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1],
            [6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2],
            [3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 0, 0, 0, 0, 0, 5],
            [2, 5, 4, 5, 2, 1, 2, 5, 0, 0, 2, 1, 2, 5, 4, 0, 0, 0, 0, 0, 4],
            [3, 6, 5, 6, 3, 2, 3, 0, 0, 0, 0, 2, 3, 6, 5, 0, 0, 0, 0, 0, 5],
            [6, 3, 2, 3, 6, 5, 6, 0, 0, 0, 0, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2],
            [5, 2, 1, 2, 5, 4, 5, 0, 0, 0, 0, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1],
            [6, 3, 2, 3, 6, 5, 6, 3, 0, 0, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2],
            [3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5],
            [2, 5, 4, 0, 0, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4],
            [3, 6, 5, 0, 0, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5],
            [6, 3, 2, 0, 0, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2],
            [5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1],
            [6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2],
            [3, 6, 5, 6, 0, 0, 0, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5],
            [2, 5, 4, 5, 0, 0, 0, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4],
            [3, 6, 5, 6, 0, 0, 0, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5],
            [6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2],
            [5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1]]
        ))]]
    y_shapes = [
        [Unknown(2, 2, Grid([
            [3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5],
            [6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2],
            [5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1],
            [6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2],
            [3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5],
            [2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4],
            [3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5],
            [6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2],
            [5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1],
            [6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2],
            [3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5],
            [2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4],
            [3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5],
            [6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2],
            [5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1],
            [6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2],
            [3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5],
            [2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4],
            [3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5],
            [6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2, 3, 6, 5, 6, 3, 2],
            [5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1, 2, 5, 4, 5, 2, 1]]
        ))]]

    action = Hamming(0, ColumnModel('tile(x,y)'), params)
    state = create_test_state(x_shapes, y_shapes)
    program = AttentionExpertProgram(action, params)
    result = program.run(state)
    assert result.out_shapes == y_shapes


def test_84():
    params = GlobalParams()
    x_shapes = [[FilledRectangle(0, 0, 9, 3, 8)]]
    y_shapes = [[Unknown(0, 0, Grid([
        [8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, -1, 8, -1, 8, -1, 8, -1, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8]
    ]))]]

    def func(df):
        cond = np.logical_and(df['y'] == 1, df['x%2'] == 1)
        return np.where(cond, -1, 8)

    action = Hamming(0, FunctionModel(func), params)
    state = create_test_state(x_shapes, y_shapes)
    program = AttentionExpertProgram(action, params)
    result = program.run(state)
    assert result.out_shapes == y_shapes


def test_70():
    params = GlobalParams()
    x_shapes = [
        [Unknown(3, 2, Grid([
            [6, 6, -1, -1, 6, 6, -1],
            [6, 6, -1, 1, 1, 1, 1],
            [-1, 6, 6, 1, 1, 1, 1],
            [-1, -1, 6, 1, 1, 1, 1],
            [-1, -1, 6, 6, -1, -1, -1],
            [-1, 6, 6, 6, 6, -1, -1],
            [-1, 6, -1, -1, 6, -1, -1],
            [-1, 6, 6, 6, 6, -1, -1],
            [-1, -1, 6, 6, -1, -1, -1],
        ]))],
        [Unknown(0, 3, Grid([
            [-1, -1, -1, 2, -1, -1, 2, -1, -1],
            [3, 3, 3, 3, 2, 2, 2, 2, -1],
            [3, 3, 3, 3, 2, 2, 2, 2, 2],
            [3, 3, 3, 3, 2, 2, -1, 2, -1],
            [3, 3, 3, 3, -1, -1, -1, 2, -1],
            [-1, -1, 2, 2, 2, 2, 2, 2, -1],
            [-1, 2, 2, -1, 2, 2, -1, 2, 2],
            [-1, 2, 2, -1, -1, -1, -1, 2, 2],
        ]))],
        [Unknown(4, 5, Grid([
            [-1, -1, -1, 5, -1, -1, -1, 5, -1, -1],
            [8, 8, 8, 8, 5, 5, 5, -1, 5, -1],
            [8, 8, 8, 8, -1, -1, -1, -1, 5, 5],
            [8, 8, 8, 8, 5, 5, 5, 5, 5, 5],
            [8, 8, 8, 8, -1, 5, -1, -1, -1, -1],
            [8, 8, 8, 8, 5, 5, 5, 5, 5, 5],
            [-1, -1, 5, 5, -1, 5, -1, 5, 5, -1],
            [-1, -1, -1, 5, -1, -1, -1, 5, -1, -1],
        ]))]]
    y_shapes = [
        [Unknown(3, 2, Grid([
            [6, 6, -1, -1, 6, 6],
            [6, 6, -1, -1, 6, 6],
            [-1, 6, 6, 6, 6, -1],
            [-1, -1, 6, 6, -1, -1],
            [-1, -1, 6, 6, -1, -1],
            [-1, 6, 6, 6, 6, -1],
            [-1, 6, -1, -1, 6, -1],
            [-1, 6, 6, 6, 6, -1],
            [-1, -1, 6, 6, -1, -1]
        ]))],
        [Unknown(1, 3, Grid([
            [-1, -1, 2, -1, -1, 2, -1, -1],
            [-1, 2, 2, 2, 2, 2, 2, -1],
            [2, 2, 2, 2, 2, 2, 2, 2],
            [-1, 2, -1, 2, 2, -1, 2, -1],
            [-1, 2, -1, -1, -1, -1, 2, -1],
            [-1, 2, 2, 2, 2, 2, 2, -1],
            [2, 2, -1, 2, 2, -1, 2, 2],
            [2, 2, -1, -1, -1, -1, 2, 2]
        ]))],
        [Unknown(5, 5, Grid([
            [-1, -1, 5, -1, -1, -1, 5, -1, -1],
            [-1, 5, -1, 5, 5, 5, -1, 5, -1],
            [5, 5, -1, -1, -1, -1, -1, 5, 5],
            [5, 5, 5, 5, 5, 5, 5, 5, 5],
            [-1, -1, -1, -1, 5, -1, -1, -1, -1],
            [5, 5, 5, 5, 5, 5, 5, 5, 5],
            [-1, 5, 5, -1, 5, -1, 5, 5, -1],
            [-1, -1, 5, -1, -1, -1, 5, -1, -1]
        ]))]]

    def func(df):
        return np.where(df['shape.least_color'] == df['cell(x,y)'],
                        df['cell(- x,y)'], df['cell(x,y)'])

    action = Hamming(0, FunctionModel(func), params)
    state = create_test_state(x_shapes, y_shapes)
    program = AttentionExpertProgram(action, params)
    result = program.run(state)
    assert result.out_shapes == y_shapes
